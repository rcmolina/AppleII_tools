.list
.code

POINTER_ALPHA = $06
POINTER_BETA = $08

;low res color defintions
PINK = $BB
LIGHT_GREY = $AA
ORANGE = $99
LIGHT_GREEN = $CC
DARK_GREEN = $44
PURPLE = $33
MAGENTA = $11
BLACK = $00

; play area screen geometry
FIRST_COLUMN = 0
LAST_COLUMN = 39
FIRST_ROW = 0
LAST_ROW = 19

; Soft switch defintions
SW_TEXT_OFF = $C050
SW_MIXED_OFF = $C052
SW_MIXED_ON = $C053
SW_80COL_OFF = $C00C
SW_PAGE2_OFF = $C054

;key codes
LEFT_KEY = $08
RIGHT_KEY = $15
UP_KEY = $0B

;4K ring buffer definition
BUFFER_FIRST_WORD = $2000
BUFFER_LAST_WORD = $2FFE

MAIN:
 JSR RAND_INIT
 JSR ENABLE_LOW_RES_MIXED
 JSR BUFFER_INIT
 ;JSR SHOW_TITLE
 JSR CLEAR_SCREEN
 JSR DRAW_STATIC_GFX
 JSR START_GAME_LOOP
 JMP MAIN

 
ENABLE_LOW_RES_MIXED:
 STA SW_TEXT_OFF
 STA SW_MIXED_ON
 STA SW_80COL_OFF
 STA SW_PAGE2_OFF
 RTS

CLEARING_ROW: .byte $00
CLEAR_SCREEN:
 LDA #BLACK
 STA FILL_ROW_VALUE
 LDA #LAST_ROW
 STA CLEARING_ROW
CLEARING_LOOP:
 LDA CLEARING_ROW
 BMI CLEAR_SCREEN_DONE
 STA FILL_ROW_NUMBER
 JSR FILL_ROW
 DEC CLEARING_ROW
 JMP CLEARING_LOOP
CLEAR_SCREEN_DONE:

 ;clear last 4 lines of text
 LDA #$20
 ORA #%10000000
 STA FILL_ROW_VALUE
 
 LDA #20
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #21
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #22
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #23
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 RTS

DRAW_STATIC_GFX:
 JSR DRAW_GAME_BOX
 JSR DRAW_APPLE_LABEL
 RTS

DRAW_APPLE_LABEL:
 LDX #21 ;row
 LDA LO, X
 STA COPY_TEXT_DESTINATION_ADDR
 LDA HI, X
 STA COPY_TEXT_DESTINATION_ADDR + 1

 LDA COPY_TEXT_DESTINATION_ADDR
 CLC
 ADC #15 ;column
 STA COPY_TEXT_DESTINATION_ADDR
 LDA COPY_TEXT_DESTINATION_ADDR + 1
 ADC #0
 STA COPY_TEXT_DESTINATION_ADDR + 1
 
 LDA #<AppleTextLabel
 STA COPY_TEXT_SOURCE_ADDR
 LDA #>AppleTextLabel
 STA COPY_TEXT_SOURCE_ADDR + 1

 JSR COPY_TEXT
 RTS

DRAW_GAME_BOX:
 LDA #LIGHT_GREY
 STA FILL_ROW_VALUE

 LDA #FIRST_ROW
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #LAST_ROW
 STA FILL_ROW_NUMBER
 JSR FILL_ROW

 LDA #LIGHT_GREY
 STA FILL_COLUMN_VALUE
 LDA #FIRST_COLUMN
 STA FILL_COLUMN_NUMBER
 JSR FILL_COLUMN

 LDA #LAST_COLUMN
 STA FILL_COLUMN_NUMBER
 JSR FILL_COLUMN

 RTS


FILL_ROW_NUMBER: .byte $00
FILL_ROW_VALUE: .byte $00
FILL_ROW:
 LDX FILL_ROW_NUMBER
 LDA LO,X
 STA POINTER_ALPHA
 LDA HI,X
 STA POINTER_ALPHA+1
 LDA FILL_ROW_VALUE
 LDY #LAST_COLUMN
FILL_ROW_LOOP:
 STA (POINTER_ALPHA), Y
 DEY
 BPL FILL_ROW_LOOP
 RTS


FILL_COLUMN_NUMBER: .byte $00
FILL_COLUMN_VALUE: .byte $00
FILL_COLUMN:
 LDX #LAST_ROW
 LDY FILL_COLUMN_NUMBER
FILL_COLUMN_LOOP:
 LDA LO,X
 STA POINTER_ALPHA
 LDA HI,X
 STA POINTER_ALPHA+1
 LDA FILL_COLUMN_VALUE
 STA (POINTER_ALPHA), Y
 DEX
 BPL FILL_COLUMN_LOOP
 RTS

WRITE_PIXEL_ROW: .byte $00
WRITE_PIXEL_COLUMN: .byte $00
WRITE_PIXEL_COLOR: .byte $00
WRITE_PIXEL:
 LDX WRITE_PIXEL_ROW
 LDA LO,X
 STA POINTER_ALPHA
 LDA HI,X
 STA POINTER_ALPHA+1
 LDA WRITE_PIXEL_COLOR
 LDY WRITE_PIXEL_COLUMN
 STA (POINTER_ALPHA), Y
 RTS

READ_PIXEL_ROW: .byte $00
READ_PIXEL_COLUMN: .byte $00
READ_PIXEL:
 LDX READ_PIXEL_ROW
 LDA LO,X
 STA POINTER_ALPHA
 LDA HI,X
 STA POINTER_ALPHA+1
 LDY READ_PIXEL_COLUMN
 LDA (POINTER_ALPHA), Y
 RTS
 
COPY_TEXT_SOURCE_ADDR: .byte $00,$00
COPY_TEXT_DESTINATION_ADDR: .byte $00,$00
COPY_TEXT:
 LDA COPY_TEXT_SOURCE_ADDR
 STA POINTER_ALPHA
 LDA COPY_TEXT_SOURCE_ADDR+1
 STA POINTER_ALPHA+1

 LDA COPY_TEXT_DESTINATION_ADDR
 STA POINTER_BETA
 LDA COPY_TEXT_DESTINATION_ADDR+1
 STA POINTER_BETA+1

 LDY #0
COPY_LOOP:
 LDA (POINTER_ALPHA), Y
 CMP #0
 BEQ COPY_END
 ORA #%10000000
 STA (POINTER_BETA), Y
 INY
 JMP COPY_LOOP
COPY_END:
 RTS

;=========================
; Ring Buffer code
;==========================
BUFFER_HEAD: .word BUFFER_LAST_WORD
BUFFER_TAIL: .word BUFFER_FIRST_WORD

BUFFER_INIT:
 LDA #<BUFFER_FIRST_WORD
 STA BUFFER_TAIL
 LDA #>BUFFER_FIRST_WORD
 STA BUFFER_TAIL + 1

 LDA #<BUFFER_LAST_WORD
 STA BUFFER_HEAD
 LDA #>BUFFER_LAST_WORD
 STA BUFFER_HEAD + 1

 RTS



BUFFER_NEW_ROW: .byte $00
BUFFER_NEW_COLUMN: .byte $00
BUFFER_NEW:
 JSR INCREMENT_HEAD

 ;deference head pointer
 LDA BUFFER_HEAD
 STA POINTER_ALPHA
 LDA BUFFER_HEAD+1
 STA POINTER_ALPHA+1

 ;Add row to head
 LDA BUFFER_NEW_ROW
 LDY #0
 STA (POINTER_ALPHA),Y

 ;Add column to head
 LDA BUFFER_NEW_COLUMN
 INY
 STA (POINTER_ALPHA),Y
 
 
 RTS

INCREMENT_HEAD:
 LDA BUFFER_HEAD
 CLC
 ADC #2
 STA BUFFER_HEAD
 LDA BUFFER_HEAD+1
 ADC #0
 STA BUFFER_HEAD+1

 LDA #>BUFFER_LAST_WORD
 CMP BUFFER_HEAD+1
 BMI RESET_HEAD
 RTS
RESET_HEAD:
 LDA #0
 STA BUFFER_HEAD
 LDA #$20
 STA BUFFER_HEAD+1
 RTS

BUFFER_POP_TAIL:
 LDA BUFFER_TAIL
 CLC
 ADC #2
 STA BUFFER_TAIL
 LDA BUFFER_TAIL+1
 ADC #0
 STA BUFFER_TAIL+1

 LDA #>BUFFER_LAST_WORD
 CMP BUFFER_TAIL+1
 BMI RESET_TAIL
 RTS
RESET_TAIL:
  LDA #0
  STA BUFFER_TAIL
  LDA #$20
  STA BUFFER_TAIL+1
  RTS

GET_HEAD_ROW:
 LDA BUFFER_HEAD
 STA POINTER_ALPHA
 LDA BUFFER_HEAD+1
 STA POINTER_ALPHA+1
 LDY #0
 LDA (POINTER_ALPHA), Y
 RTS

GET_HEAD_COLUMN:
 LDA BUFFER_HEAD
 STA POINTER_ALPHA
 LDA BUFFER_HEAD+1
 STA POINTER_ALPHA+1
 LDY #1
 LDA (POINTER_ALPHA), Y
 RTS

GET_TAIL_ROW:
 LDA BUFFER_TAIL
 STA POINTER_ALPHA
 LDA BUFFER_TAIL+1
 STA POINTER_ALPHA+1
 LDY #0
 LDA (POINTER_ALPHA), Y
 RTS

GET_TAIL_COLUMN:
 LDA BUFFER_TAIL
 STA POINTER_ALPHA
 LDA BUFFER_TAIL+1
 STA POINTER_ALPHA+1
 LDY #1
 LDA (POINTER_ALPHA), Y
 RTS


DIRECTION: .byte $00
GROWTH_STEPS_REMAINING: .byte $00

;====================
; Keyboard input
;=====================
START_GAME_LOOP:
 JSR CREATE_INITIAL_SNAKE
 JSR PLACE_NEW_APPLE
 
 LDA #0
 STA IS_DEAD
 STA DIRECTION
 STA APPLES_ATE
 
 JSR LISTEN_KEYBOARD
 RTS

PLACE_APPLES:
 LDA #4
 STA WRITE_PIXEL_ROW
 LDA #4
 STA WRITE_PIXEL_COLUMN
 LDA #MAGENTA
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 LDA #10
 STA WRITE_PIXEL_ROW
 LDA #10
 STA WRITE_PIXEL_COLUMN
 LDA #MAGENTA
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 LDA #2
 STA WRITE_PIXEL_ROW
 LDA #38
 STA WRITE_PIXEL_COLUMN
 LDA #MAGENTA
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 RTS

NEW_APPLE_ROW: .byte $00
NEW_APPLE_COLUMN: .byte $00
PLACE_NEW_APPLE:
    JSR NEXTRAND
    LDA SEED+1
    AND #%00011111
    STA NEW_APPLE_ROW
    LDA #LAST_ROW
    CMP NEW_APPLE_ROW
    BPL GOOD_RAND_ROW
    LDA NEW_APPLE_ROW
    SEC
    SBC #LAST_ROW
    STA NEW_APPLE_ROW
GOOD_RAND_ROW:
    
    LDA SEED+1
    AND #%00111111
    STA NEW_APPLE_COLUMN
    LDA #LAST_COLUMN
    CMP NEW_APPLE_COLUMN
    BPL GOOD_RAND_COLUMN
    LDA NEW_APPLE_COLUMN
    SEC
    SBC #LAST_COLUMN
    STA NEW_APPLE_COLUMN
GOOD_RAND_COLUMN:

    LDA NEW_APPLE_ROW
    STA READ_PIXEL_ROW
    STA WRITE_PIXEL_ROW
    LDA NEW_APPLE_COLUMN
    STA READ_PIXEL_COLUMN
    STA WRITE_PIXEL_COLUMN
    JSR READ_PIXEL
    CMP #0
    BNE PLACE_NEW_APPLE

    LDA #MAGENTA
    STA WRITE_PIXEL_COLOR
    JSR WRITE_PIXEL
    RTS



CREATE_INITIAL_SNAKE:
 LDA #12
 STA BUFFER_NEW_ROW
 STA WRITE_PIXEL_ROW
 LDA #20
 STA BUFFER_NEW_COLUMN
 STA WRITE_PIXEL_COLUMN
 JSR BUFFER_NEW
 LDA #LIGHT_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 LDA #11
 STA BUFFER_NEW_ROW
 STA WRITE_PIXEL_ROW
 LDA #20
 STA BUFFER_NEW_COLUMN
 STA WRITE_PIXEL_COLUMN
 JSR BUFFER_NEW
 LDA #LIGHT_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 LDA #10
 STA BUFFER_NEW_ROW
 STA WRITE_PIXEL_ROW
 LDA #20
 STA BUFFER_NEW_COLUMN
 STA WRITE_PIXEL_COLUMN
 JSR BUFFER_NEW
 LDA #DARK_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 RTS

RESET_KEY_PRESSED:
 LDA #0
 STA KEY_PRESSED
 RTS

VBLANK_COUNT: .byte $00
VBLANKS_PER_GAMELOOP = 15
KEY_PRESSED: .byte $00
APPLES_ATE: .byte $00

LISTEN_KEYBOARD:
 ;Start read key loop
 JSR NEXTRAND
 LDA $C019
 BPL ON_VBLANK
 LDA $C000
 BPL LISTEN_KEYBOARD
 STA $C010
 AND  #%01111111
 CMP  #LEFT_KEY
 BEQ  ON_LEFT
 CMP  #RIGHT_KEY
 BEQ  ON_RIGHT
 JMP LISTEN_KEYBOARD
ON_LEFT:
 STA KEY_PRESSED
 JMP LISTEN_KEYBOARD
ON_RIGHT:
 STA KEY_PRESSED
 JMP LISTEN_KEYBOARD
ON_VBLANK:
 LDA VBLANK_COUNT
 BMI TIC_GAME_LOOP
 DEC VBLANK_COUNT
 JMP LISTEN_KEYBOARD
TIC_GAME_LOOP:
 JSR UPDATE_GAME_STATE
 LDA #VBLANKS_PER_GAMELOOP
 STA VBLANK_COUNT
 JSR RESET_KEY_PRESSED

 LDA IS_DEAD
 CMP #1
 BEQ DRAW_DEAD_SCREEN

 JMP LISTEN_KEYBOARD

IS_DEAD: .byte $00

DRAW_DEAD_SCREEN:
 LDA #<DeadText
 STA COPY_TEXT_SOURCE_ADDR
 LDA #>DeadText
 STA COPY_TEXT_SOURCE_ADDR + 1

 LDX #22 ;row
 LDA LO, X
 STA COPY_TEXT_DESTINATION_ADDR
 LDA HI, X
 STA COPY_TEXT_DESTINATION_ADDR + 1

 LDA COPY_TEXT_DESTINATION_ADDR
 CLC
 ADC #14 ;add for column
 STA COPY_TEXT_DESTINATION_ADDR
 LDA COPY_TEXT_DESTINATION_ADDR + 1
 ADC #0
 STA COPY_TEXT_DESTINATION_ADDR + 1

 JSR COPY_TEXT

 LDA #<AnyKeyText
 STA COPY_TEXT_SOURCE_ADDR
 LDA #>AnyKeyText
 STA COPY_TEXT_SOURCE_ADDR + 1

 LDX #23 ;row
 LDA LO, X
 STA COPY_TEXT_DESTINATION_ADDR
 LDA HI, X
 STA COPY_TEXT_DESTINATION_ADDR + 1

 LDA COPY_TEXT_DESTINATION_ADDR
 CLC
 ADC #7 ;add for column
 STA COPY_TEXT_DESTINATION_ADDR
 LDA COPY_TEXT_DESTINATION_ADDR + 1
 ADC #0
 STA COPY_TEXT_DESTINATION_ADDR + 1

 JSR COPY_TEXT

WAIT_FOR_ANYKEY:
 LDA $C000
 BPL WAIT_FOR_ANYKEY
 STA $C010

 RTS

;Directions: 00 = up, 01 = right, 10 = down, 11 = left
HANDLE_LEFT:
 LDA DIRECTION
 SEC
 SBC #1
 AND #%00000011
 STA DIRECTION
 RTS

HANDLE_RIGHT:
 LDA DIRECTION
 CLC
 ADC #1
 AND #%00000011
 STA DIRECTION
 RTS



UPDATE_GAME_STATE:

 LDA KEY_PRESSED
 CMP #LEFT_KEY
 BEQ SET_LEFT_DIRECTION
 CMP #RIGHT_KEY
 BEQ SET_RIGHT_DIRECTION
 JMP NOTHING_PRESSED
SET_RIGHT_DIRECTION:
 JSR HANDLE_RIGHT
 JMP NOTHING_PRESSED
SET_LEFT_DIRECTION:
 JSR HANDLE_LEFT

NOTHING_PRESSED:
 ;erase head with body segment
 JSR GET_HEAD_ROW
 STA WRITE_PIXEL_ROW
 JSR GET_HEAD_COLUMN
 STA WRITE_PIXEL_COLUMN
 LDA #LIGHT_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL

 ;add new head to buffer
 JSR GET_NEW_HEAD_ROW
 STA BUFFER_NEW_ROW
 JSR GET_NEW_HEAD_COLUMN
 STA BUFFER_NEW_COLUMN
 JSR BUFFER_NEW

CHECK_NEXT_SPOT:
 JSR GET_HEAD_COLOR
 CMP #LIGHT_GREY
 BEQ ON_DEAD
 CMP #LIGHT_GREEN
 BEQ ON_DEAD
 CMP #MAGENTA
 BEQ EAT_APPLE
 JMP SKIP
ON_DEAD:
 JSR ERASE_TAIL
 JSR DIE
 JMP SKIP
EAT_APPLE:
 LDA GROWTH_STEPS_REMAINING
 CLC
 ADC #5
 STA GROWTH_STEPS_REMAINING
 JSR PLACE_NEW_APPLE
 INC APPLES_ATE
SKIP:

 ;draw new head
 JSR GET_HEAD_ROW
 STA WRITE_PIXEL_ROW
 JSR GET_HEAD_COLUMN
 STA WRITE_PIXEL_COLUMN
 LDA #DARK_GREEN
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL
 
CHECK_TAIL:
 LDA GROWTH_STEPS_REMAINING
 CMP #0
 BNE GROWING
 JSR GET_TAIL_ROW
 STA WRITE_PIXEL_ROW
 JSR GET_TAIL_COLUMN
 STA WRITE_PIXEL_COLUMN
 LDA #BLACK
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL
 JSR BUFFER_POP_TAIL
 JMP CHECK_TAIL_DONE
GROWING:
 LDA GROWTH_STEPS_REMAINING
 SEC
 SBC #1
 STA GROWTH_STEPS_REMAINING
CHECK_TAIL_DONE:

 JSR UPDATE_SCORE

 RTS


UPDATE_SCORE:
 JSR GENERATE_SCORE_TEXT
 
 LDA #<SCORE_TEXT
 STA COPY_TEXT_SOURCE_ADDR
 LDA #>SCORE_TEXT
 STA COPY_TEXT_SOURCE_ADDR + 1

 LDX #21 ;row
 LDA LO, X
 STA COPY_TEXT_DESTINATION_ADDR
 LDA HI, X
 STA COPY_TEXT_DESTINATION_ADDR + 1

 LDA COPY_TEXT_DESTINATION_ADDR
 CLC
 ADC #23 ;column
 STA COPY_TEXT_DESTINATION_ADDR
 LDA COPY_TEXT_DESTINATION_ADDR + 1
 ADC #0
 STA COPY_TEXT_DESTINATION_ADDR + 1

 JSR COPY_TEXT

 RTS

SCORE_TEXT: .byte "000", $00
CHARACTER_LOOKUP: .byte "0123456789 "
TEMP_SCORE: .byte $00
GENERATE_SCORE_TEXT:
 LDA APPLES_ATE
 LDX #0
HUNDREDS:
 INX
 SEC
 SBC #100
 BPL HUNDREDS
 DEX
 CLC
 ADC #100
 STA TEMP_SCORE
 LDA CHARACTER_LOOKUP, X
 STA SCORE_TEXT

 LDA TEMP_SCORE
 LDX #0
TENS:
 STA TEMP_SCORE
 INX
 SEC
 SBC #10
 BPL TENS
 DEX
 CLC
 ADC #10
 STA TEMP_SCORE
 LDA CHARACTER_LOOKUP, X
 STA SCORE_TEXT + 1

 LDA TEMP_SCORE
 LDX #0 
ONES:
 INX
 SEC
 SBC #1
 BPL ONES
 DEX
 LDA CHARACTER_LOOKUP, X
 STA SCORE_TEXT + 2

 RTS

GET_NEW_HEAD_ROW:
 LDA DIRECTION
 CMP #0
 BEQ NEW_UP
 CMP #2
 BEQ NEW_DOWN
 JSR GET_HEAD_ROW
 RTS

NEW_UP:
 JSR GET_HEAD_ROW
 SEC
 SBC #1
 RTS

NEW_DOWN:
 JSR GET_HEAD_ROW
 CLC
 ADC #1
 RTS

GET_NEW_HEAD_COLUMN:
 LDA DIRECTION
 CMP #1
 BEQ NEW_RIGHT
 CMP #3
 BEQ NEW_LEFT
 JSR GET_HEAD_COLUMN
 RTS

NEW_RIGHT:
 JSR GET_HEAD_COLUMN
 CLC
 ADC #1
 RTS

NEW_LEFT:
 JSR GET_HEAD_COLUMN
 SEC
 SBC #1
 RTS


GET_HEAD_COLOR:
  JSR GET_HEAD_ROW
  STA READ_PIXEL_ROW
  JSR GET_HEAD_COLUMN
  STA READ_PIXEL_COLUMN
  JSR READ_PIXEL
  RTS

DIE:
 JSR GET_HEAD_ROW
 STA WRITE_PIXEL_ROW
 JSR GET_HEAD_COLUMN
 STA WRITE_PIXEL_COLUMN
 LDA #PINK
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL
 LDA #1
 STA IS_DEAD
 RTS



ERASE_TAIL:
 JSR GET_TAIL_ROW
 STA WRITE_PIXEL_ROW
 JSR GET_TAIL_COLUMN
 STA WRITE_PIXEL_COLUMN
 LDA #BLACK
 STA WRITE_PIXEL_COLOR
 JSR WRITE_PIXEL
 RTS

;======================
; Random number generator
;==========================

SEED: .byte $11,$22,$33,$44

;init random number to zero
RAND_INIT:
 LDA #0
 STA SEED
 STA SEED+1
 STA SEED+2
 STA SEED+3
 JSR NEXTRAND
 RTS

TEMP: .byte $00,$00,$00,$00

;Calculate next random
NEXTRAND: LDA #1
 LDX #3
RAND1: STA TEMP,X
 LSR
 DEX
 BPL RAND1
 LDY #$20
 BNE RAND5
RAND2: BCC RAND4
 CLC
 LDX #3
RAND3: LDA TEMP,X
 ADC RAND6,X
 STA TEMP,X
 DEX
 BPL RAND3
RAND4: ROR TEMP
 ROR TEMP+1
 ROR TEMP+2
 ROR TEMP+3
RAND5: ROR SEED
 ROR SEED+1
 ROR SEED+2
 ROR SEED+3
 DEY
 BPL RAND2
 RTS
RAND6: .byte $00,$19,$66,$0D

DeadText: .byte "You are dead",0
AnyKeyText: .byte "Press any key to restart",0
AppleTextLabel: .byte "Apples: 000",$00
blah: .byte $00

; Low-res square row map
HI: .byte $04,$04,$05,$05,$06,$06,$07,$07
.byte $04,$04,$05,$05,$06,$06,$07,$07
.byte $04,$04,$05,$05,$06,$06,$07,$07

LO: .byte $00,$80,$00,$80,$00,$80,$00,$80
.byte $28,$A8,$28,$A8,$28,$A8,$28,$A8
.byte $50,$D0,$50,$D0,$50,$D0,$50,$D0